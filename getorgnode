#!/usr/bin/env bash

# getorgnode - Get Org Node by ID via CLI

# Check if Emacs Daemon is running
if ! pgrep -x "emacs" > /dev/null; then
  echo "Emacs daemon is not running. Please start it first."
  exit 1
fi

show_locate=0

if [ "$1" = "--locate" ]; then
  show_locate=1
  shift
fi

if [ -z "$1" ]; then
  echo "Usage: $0 [--locate] ORG_ID"
  exit 1
fi

org_id="$1"

elisp="
(let ((node (org-roam-node-from-id \"$org_id\")))
  (if node
      (with-current-buffer (find-file-noselect (org-roam-node-file node))
        (save-excursion
          (goto-char (org-roam-node-point node))
          (let ((start (line-number-at-pos (point))))
            (org-end-of-subtree t t)
            (let ((end (line-number-at-pos (point))))
              (princ (format \"%s\n%d\n%d\"
                             (expand-file-name (org-roam-node-file node))
                             start
                             end))))))
    (princ \"ID not found\")))
"

result="$(emacsclient --eval "$elisp" | sed -e 's/^"//' -e 's/"$//' | perl -pe 's/\\n/\n/g')"

if echo "$result" | grep -q "^ID not found$"; then
  echo "ID not found"
  exit 1
fi

if [ "$show_locate" -eq 1 ]; then
  echo "$result"
else
  # Parse file, start, end from result
  file=$(echo "$result" | sed -n '1p')
  start=$(echo "$result" | sed -n '2p')
  end=$(echo "$result" | sed -n '3p')
  sed -n "${start},${end}p" "$file" |
      sed -zE 's/\nCLOCK: [^\n]+//g' | # Remove CLOCK lines
      sed -zE 's/- (Note taken on [^\n]+|State [^\n]+|Refiled on [^\n]+)(\\\\\n[ ]{2})?/- /g' | # Clean up state change and note lines
      awk '
        BEGIN {del=0; removed=0}
        !removed && /^:PROPERTIES:/ {del=1; removed=1; next}
        del && /^:END:/ {del=0; next}
        !del
      ' | # Remove PROPERTIES block
      sed -r 's/:(LOGBOOK):(.*)/-----\n--- BEGIN NOTES BLOCK ---/g' | # Replace LOGBOOK header with a custom header
      sed -r 's/:END:/--- END OF NOTES BLOCK ---\n-----\n--- BEGIN OF TASK DESCRIPTION BLOCK ---\n\n/' | # Add an end header for the logbook and start of task description
      pandoc -f org -t gfm # Convert to GitHub Flavored Markdown

fi
