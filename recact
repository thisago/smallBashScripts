#!/usr/bin/env bash

# Intention driven terminal session recorder
# Messy code ahead

# Get current epoch time in seconds
nowepoch() { date '+%s'; }
# Get terminal size in format "cols x lines"
term_size() { echo "$(tput cols)x$(tput lines)"; }

if ! test -n "$RECACT_ACTIONS"; then
  RECACT_ACTIONS='check do write plan study tweak fix refactor feat improve polish test update clean clock unplanned describe investigate review play'
fi

# Check environment variable for scopes
if ! test -n "$RECACT_SCOPES"; then
  echo "Set the RECACT_SCOPES with the space separated scopes in your environment."
  echo "Setting to default."
  RECACT_SCOPES='personal work'
fi

# Check required dependencies
for dep in asciinema jq bc gum; do
  if ! command -v "$dep" &>/dev/null; then
    echo "$dep is not on your path"
    exit 1
  fi
done

# Check if the directory is a git repository
if ! git rev-parse --is-inside-work-tree &>/dev/null; then
  echo "This script should be run inside a git repository."
  exit 1
fi

# Parse command to run
sh="$1"
if ! test -n "$sh"; then
  echo "Usage: recact2 <command to run>"
  exit 1
fi

# File and session setup
timestampsFile="timestamps.jsonl"
currentSessionFile="session.json"
castFile="$(date '+%Y%m%d').cast"
startEpoch="$(nowepoch)"

# If a session is already in progress, load it and skip to summary
if test -f "$currentSessionFile"; then
  echo "There's an unsaved session. Finish that before starting a new one."
  SUMMARY="$(cat $currentSessionFile | jq -r .pretend)"
  DURATION="$(cat $currentSessionFile | jq -r .expectedDuration)"
  startEpoch="$(cat $currentSessionFile | jq -r .start)"
else
  # Ensure asciinema cast file exists
  if ! test -f "$castFile"; then
    asciinema rec "$castFile" -c "date"
  fi

  # Prompt for action type
  ACTION=$(gum filter --no-strict \
    $RECACT_ACTIONS \
    --placeholder "Action type" \
    --header 'What category of your intended action?')
  test -n "$ACTION" || exit 1

  # Prompt for action scope
  SCOPE=$(gum filter --no-strict $RECACT_SCOPES \
    --placeholder "Action scope" --header "The scope of your intention ($ACTION)")
  test -n "$SCOPE" || exit 1

  # Prompt for summary of intended task
  BASE="$ACTION($SCOPE): "
  test -d "$timestampsFile" || touch "$timestampsFile"
  SUMMARY=$(tac "$timestampsFile" | jq -r '.[2]' | awk -F, '!a[$1]++' |
    gum filter --no-strict --value "$BASE" \
      --placeholder "Summarize your pretended task" \
      --no-fuzzy --width 50 --header "Summarize your intention ($SCOPE.$ACTION)")
  test -n "$SUMMARY" || exit 1
  [[ "$SUMMARY" = "$BASE" ]] && exit 1

  # Prompt for expected duration (minutes)
  while true; do
    DURATION=$(gum input --placeholder="Expected duration in minutes")
    if [[ "$DURATION" != "" ]] &&
      [[ "$(echo "$DURATION" | bc 2>/dev/null)" == "$DURATION" ]]; then
      break
    fi
    echo "Input should be a number"
  done

  # Debug: Show current date and cast file size
  date
  du -sh "$castFile"

  # Add the marker and the terminal size to cast file
  lastSec=$(cat "$castFile" | tail -n1 | jq -r '.[0]')
  pretend="$(date '+%H:%M:%S'): $SUMMARY"
  markerJson=$(jq -nc --arg pretend "$pretend" \
    '['$lastSec', "m", $pretend]')
  echo "$markerJson" >>"$castFile"
  resizeJson=$(jq -nc --arg size "$(term_size)" \
    '['$lastSec', "r", $size]')
  echo "$resizeJson" >>"$castFile"

  # Provide an option to abort before entering the recording loop
  echo "Press enter to continue or abort with C-c"
  read continue

  # Main session recording loop
  while true; do
    # Prompt for stdin capture
    STDIN=$(gum confirm "Capture stdin?" && echo "--stdin")

    # Save session state to file
    jq -nc --arg startTime "$startEpoch" --arg pretend "$SUMMARY" --arg duration "$DURATION" --arg stdin "$STDIN" \
      '{start: $startTime, pretend: $pretend, expectedDuration: $duration, stdin: ($stdin == "--stdin") }' >"$currentSessionFile"

    # Start asciinema recording, append to cast file
    asciinema rec "$castFile" -c "$sh" --append $STDIN

    # Ask if user wants to stop the session
    if gum confirm "Stop this session?"; then
      break
    fi
    echo "Re-opening session"
  done
fi

# Debug: Show the session information
jq -c <"$currentSessionFile"

# Prompt for what was actually done
while true; do
  REALLYDID=$(gum write --placeholder "Summarize what you really did" --value "$REALLYDID")
  if test -n "$REALLYDID" && grep -E '\.$' <<<"$REALLYDID"; then
    # Remove trailing dot
    REALLYDID="$(sed -r 's/^(.+)\.$/\1/' <<<"$REALLYDID")"
    break
  fi
  echo "Write what you did, finish with a dot."
done

# Prompt for any extra description
REALLYDIDDESC=$(gum write --placeholder "Any extra description?")

# Calculate elapsed time and check if duration exceeded
endEpoch="$(nowepoch)"
mins="$(echo "(($endEpoch - $startEpoch) / 60)" | bc)"
whyExceeded=""
if [[ "$mins" -gt "$DURATION" ]]; then
  while true; do
    whyExceeded=$(gum write --placeholder "Why you exceeded the expected duration?")
    test -n "$whyExceeded" && break
    echo "This field cannot be blank"
  done
fi

# Ask if session was productive, and if not, why
wasProductive="yes"
whyNotProductive=""
if ! gum confirm "Does you got productive?"; then
  wasProductive="no"
  while true; do
    whyNotProductive=$(gum write --placeholder "Please tell your mistakes")
    test -n "$whyNotProductive" && break
    echo "This field cannot be blank"
  done
fi

# Log session data as JSON line
timestampJson=$(jq -nc --arg endTime "$endEpoch" --arg startTime "$startEpoch" \
  --arg pretend "$SUMMARY" --arg did "$REALLYDID" --arg desc "$REALLYDIDDESC" \
  --arg duration "$DURATION" --arg whyExceeded "$whyExceeded" --arg stdin "$STDIN" \
  --arg wasProd "$wasProductive" --arg whyNotProd "$whyNotProductive" \
  '[ $startTime, $endTime, $pretend, $did, $desc, $wasProd == "yes", $whyNotProd, $duration, $whyExceeded, $stdin == "--stdin" ]')

echo "$timestampJson" >>"$timestampsFile"

# Show session summary and clean up
date
du -sh "$castFile"
rm -f "$currentSessionFile"

# Prepare and perform git commit
productivityText="Was productive: $wasProductive"
if [[ "$wasProductive" == "no" ]]; then
  productivityText="$productivityText; Why not: $whyNotProductive"
fi

git add "$castFile" "$timestampsFile"
git commit -m "$SUMMARY" \
  -m "Really did: $REALLYDID" \
  -m "$REALLYDIDDESC" \
  -m "$productivityText" \
  -m "Expected $DURATION and took $mins; $whyExceeded"
