#!/usr/bin/env bash

# Advanced PR review script using Aider

set -e

# Parse arguments for dry run
DRY_RUN=0
if [[ "$1" == "--dry-run" ]]; then
  DRY_RUN=1
  shift
fi

BASE_BRANCH=${1:-$(git rev-parse --abbrev-ref origin/HEAD | sed 's@^origin/@@')}
CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

if [ -z "$BASE_BRANCH" ] || [ -z "$CURRENT_BRANCH" ]; then
  echo "Error: Unable to determine base or current branch."
  exit 1
fi

TMPDIR=$(mktemp -d)
PR_SUMMARY_FILE="$TMPDIR/pr_summary.md"
FILE_SUMMARY_DIR="$TMPDIR/file_summaries"
mkdir -p "$FILE_SUMMARY_DIR"
CRITIQUE_FILE="$TMPDIR/file_critiques.md"

# Step 1: Generate commit/file summary and PR-wide summary

echo "# PR Summary" > "$PR_SUMMARY_FILE"
echo "" >> "$PR_SUMMARY_FILE"

# Generate PR-wide summary
PR_DIFF=$(git diff $BASE_BRANCH...$CURRENT_BRANCH)
PR_SUMMARY_PROMPT=$(echo -e "Summarize the following PR diff for context. List major changes as bullet points:\n$PR_DIFF")
echo "**Branch Diff Summary:**" >> "$PR_SUMMARY_FILE"
if [ "$DRY_RUN" -eq 1 ]; then
  echo "[DRY RUN] Would run Aider with prompt:" >> "$PR_SUMMARY_FILE"
  echo "$PR_SUMMARY_PROMPT" >> "$PR_SUMMARY_FILE"
else
  aider <<< "$PR_SUMMARY_PROMPT" >> "$PR_SUMMARY_FILE"
fi
echo -e "\n---\n" >> "$PR_SUMMARY_FILE"

declare -A FILE_SUMMARIES

COMMITS=$(git log $BASE_BRANCH..$CURRENT_BRANCH --pretty=format:"%H")
for COMMIT in $COMMITS; do
  FULL_MSG=$(git log -1 --pretty=format:"%B" $COMMIT)
  echo "## Commit: $COMMIT" >> "$PR_SUMMARY_FILE"
  echo "" >> "$PR_SUMMARY_FILE"
  echo "**Full Commit Message:**" >> "$PR_SUMMARY_FILE"
  echo "$FULL_MSG" >> "$PR_SUMMARY_FILE"
  echo "" >> "$PR_SUMMARY_FILE"
  FILES=$(git show --pretty="" --name-only $COMMIT)
  for FILE in $FILES; do
    DIFF=$(git show $COMMIT -- $FILE)
    # Aggregate previous summary if exists
    PREV_SUMMARY=""
    if [ -f "$FILE_SUMMARY_DIR/$FILE.md" ]; then
      PREV_SUMMARY=$(cat "$FILE_SUMMARY_DIR/$FILE.md")
    fi
    SUMMARY_PROMPT=$(echo -e "Summarize the changes in $FILE for commit $COMMIT. List 'Changes' and 'Review' as bullet points. If $FILE was changed in previous commits, include those summaries as context:\nPrevious summaries:\n$PREV_SUMMARY\nCurrent diff:\n$DIFF\nCommit message:\n$FULL_MSG")
    if [ "$DRY_RUN" -eq 1 ]; then
      echo "[DRY RUN] Would run Aider with prompt for $FILE in $COMMIT:" >> "$PR_SUMMARY_FILE"
      echo "$SUMMARY_PROMPT" >> "$PR_SUMMARY_FILE"
      echo "" >> "$PR_SUMMARY_FILE"
      # Append to file summary for dry run
      mkdir -p "$FILE_SUMMARY_DIR/$(dirname "$FILE")"
      echo "$SUMMARY_PROMPT" >> "$FILE_SUMMARY_DIR/$FILE.md"
    else
      SUMMARY=$(aider <<< "$SUMMARY_PROMPT")
      echo "### File: $FILE" >> "$PR_SUMMARY_FILE"
      echo "$SUMMARY" >> "$PR_SUMMARY_FILE"
      echo "" >> "$PR_SUMMARY_FILE"
      # Append to file summary
      echo "$PREV_SUMMARY" > "$FILE_SUMMARY_DIR/$FILE.md"
      echo "$SUMMARY" >> "$FILE_SUMMARY_DIR/$FILE.md"
    fi
  done
  echo -e "\n---\n" >> "$PR_SUMMARY_FILE"
done

# Step 2: Critique each file with clean context

echo "# File-by-File Critique" > "$CRITIQUE_FILE"
echo "" >> "$CRITIQUE_FILE"

CHANGED_FILES=$(git diff --name-only $BASE_BRANCH...$CURRENT_BRANCH)
for FILE in $CHANGED_FILES; do
  CONTEXT=$(cat "$PR_SUMMARY_FILE"; cat "$FILE_SUMMARY_DIR/$FILE.md")
  DIFF=$(git diff $BASE_BRANCH...$CURRENT_BRANCH -- $FILE)
  CRITIQUE_PROMPT=$(echo -e "Given this context (PR summary and all commit/file summaries for $FILE), and the diff for $FILE, list possible issues as bullet points, considering all changes.\nContext:\n$CONTEXT\nDiff:\n$DIFF")
  if [ "$DRY_RUN" -eq 1 ]; then
    echo "[DRY RUN] Would run Aider with critique prompt for $FILE:" >> "$CRITIQUE_FILE"
    echo "$CRITIQUE_PROMPT" >> "$CRITIQUE_FILE"
    echo "" >> "$CRITIQUE_FILE"
  else
    CRITIQUE=$(aider <<< "$CRITIQUE_PROMPT")
    echo "## File: $FILE" >> "$CRITIQUE_FILE"
    echo "$CRITIQUE" >> "$CRITIQUE_FILE"
    echo "" >> "$CRITIQUE_FILE"
  fi
done

# Output results
cat "$PR_SUMMARY_FILE"
echo -e "\n\n"
cat "$CRITIQUE_FILE"

# # Cleanup
# rm -rf "$TMPDIR"
